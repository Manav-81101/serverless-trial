service: appsync-intro

plugins:
  - serverless-appsync-plugin

provider:
  name: aws
  runtime: nodejs12.x
  profile: default
  region: us-east-1
  timeout: 100
  stage: dev
  iam: 
    role:
      statements:
        - Effect: Allow
          Action: 
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Scan"
          Resource: 'arn:aws:dynamodb:us-east-1:*:table/${self:custom.db}'

custom:
  db: users

  appSync:
    name: appsync-trial
    authenticationType: API_KEY
    mappingTemplates:      
      - type: Mutation
        field: addUser
        dataSource: addUserFunction
        request: false
        response: false

      - type: Query
        field: fetchAll
        dataSource: fetchAllFunction
        request: false
        response: false

      - type: Query
        field: fetchByKey
        dataSource: fetchUserFunction
        request: false
        response: false
        
    dataSources:
      - type: AWS_LAMBDA
        name: addUserFunction
        config:
          functionName: addUser

      - type: AWS_LAMBDA
        name: fetchAllFunction
        config:
          functionName: fetchAllUsers

      - type: AWS_LAMBDA
        name: fetchUserFunction
        config:
          functionName: fetchUser

functions:
  fetchAllUsers:
    handler: functions/fetchAllUsers.handler
    environment:
      TABLE_NAME: !Ref UserTable

  fetchUser:
    handler: functions/fetchUser.handler
    environment:
      TABLE_NAME: !Ref UserTable

  addUser:
    handler: functions/addUser.handler
    environment:
      TABLE_NAME: !Ref UserTable

resources:
  Resources:
    UserTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.db}